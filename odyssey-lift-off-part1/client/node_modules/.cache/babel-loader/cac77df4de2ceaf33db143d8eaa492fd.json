{"ast":null,"code":"var _jsxFileName = \"/Users/cynber/Developer/GitHub/Learn-GraphQL-with-Apollo/odyssey-lift-off-part1/client/src/pages/tracks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport TrackCard from \"../containers/track-card\";\nimport { Layout, QueryResult } from \"../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  loading,\n  error,\n  data\n} = useQuery(TRACKS);\n/**\n * Tracks Page is the Catstronauts home page.\n * We display a grid of tracks fetched with useQuery with the TRACKS query\n */\n\n/** TRACKS query to retrieve all tracks */\n\nexport const TRACKS = gql`\n  query getTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        name\n        photo\n      }\n    }\n  }\n`;\n\nconst Tracks = () => {\n  _s();\n\n  var _data$tracksForHome;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TRACKS);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    grid: true,\n    children: /*#__PURE__*/_jsxDEV(QueryResult, {\n      error: error,\n      loading: loading,\n      data: data,\n      children: data === null || data === void 0 ? void 0 : (_data$tracksForHome = data.tracksForHome) === null || _data$tracksForHome === void 0 ? void 0 : _data$tracksForHome.map((track, idx) => /*#__PURE__*/_jsxDEV(TrackCard, {\n        track: track\n      }, `${track.id}-${idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tracks, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/Users/cynber/Developer/GitHub/Learn-GraphQL-with-Apollo/odyssey-lift-off-part1/client/src/pages/tracks.js"],"names":["React","useQuery","gql","TrackCard","Layout","QueryResult","loading","error","data","TRACKS","Tracks","tracksForHome","map","track","idx","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,eAApC;;AAEA,MAAM;AAACC,EAAAA,OAAD;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA;AAAjB,IAAyBP,QAAQ,CAACQ,MAAD,CAAvC;AAEA;AACA;AACA;AACA;;AACA;;AACA,OAAO,MAAMA,MAAM,GAAGP,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO;;AAgBP,MAAMQ,MAAM,GAAG,MAAM;AAAA;;AAAA;;AACnB,QAAM;AAAEJ,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACQ,MAAD,CAAzC;AAEA,sBACE,QAAC,MAAD;AAAQ,IAAA,IAAI,MAAZ;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEF,KAApB;AAA2B,MAAA,OAAO,EAAED,OAApC;AAA6C,MAAA,IAAI,EAAEE,IAAnD;AAAA,gBACGA,IADH,aACGA,IADH,8CACGA,IAAI,CAAEG,aADT,wDACG,oBAAqBC,GAArB,CAAyB,CAACC,KAAD,EAAQC,GAAR,kBACxB,QAAC,SAAD;AAAsC,QAAA,KAAK,EAAED;AAA7C,SAAiB,GAAEA,KAAK,CAACE,EAAG,IAAGD,GAAI,EAAnC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAZD;;GAAMJ,M;UAC6BT,Q;;;KAD7BS,M;AAcN,eAAeA,MAAf","sourcesContent":["import React from 'react';\nimport {useQuery, gql} from '@apollo/client';\nimport TrackCard from \"../containers/track-card\";\nimport { Layout, QueryResult } from \"../components\";\n\nconst {loading, error, data} = useQuery(TRACKS);\n\n/**\n * Tracks Page is the Catstronauts home page.\n * We display a grid of tracks fetched with useQuery with the TRACKS query\n */\n/** TRACKS query to retrieve all tracks */\nexport const TRACKS = gql`\n  query getTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        name\n        photo\n      }\n    }\n  }\n`;\n\nconst Tracks = () => {\n  const { loading, error, data } = useQuery(TRACKS);\n\n  return (\n    <Layout grid>\n      <QueryResult error={error} loading={loading} data={data}>\n        {data?.tracksForHome?.map((track, idx) => (\n          <TrackCard key={`${track.id}-${idx}`} track={track} />\n        ))}\n      </QueryResult>\n    </Layout>\n  );\n};\n\nexport default Tracks;\n"]},"metadata":{},"sourceType":"module"}